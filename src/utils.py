# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JNFU4ka0SpBLvx4K3wK5l13MISDZqFlZ
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


def adstock_transform(X, alpha):
    """Apply adstock transformation recursively."""
    X_adstocked = np.zeros_like(X, dtype=float)
    X_adstocked[0] = X[0]  # Initialize the first value

    for t in range(1, len(X)):
        X_adstocked[t] = X[t] + alpha * X_adstocked[t - 1]  # Carryover effect

    return X_adstocked

def hill_transform(media_slice, ec, slope):
    """Apply the Hill function transformation."""
    return (media_slice ** slope) / (ec ** slope + media_slice ** slope)


# Function to find optimal alpha for each media channel individually
def find_optimal_alpha_per_channel(X_media, y_sales, alpha_range=np.arange(0.2, 0.9, 0.1)):
    best_alphas = []
    mse_errors = []

    # Loop over each media channel
    for i, media_channel in enumerate(X_media.T):
        best_alpha = None
        best_mse = float('inf')
        channel_errors = []  # Store errors for each alpha

        for alpha in alpha_range:
            # Apply adstock transformation to this channel
            X_media_adstocked = adstock_transform(media_channel, alpha)

            # Fit linear regression model
            model = LinearRegression()
            model.fit(X_media_adstocked.reshape(-1, 1), y_sales)

            # Predict sales and calculate mean squared error
            y_pred = model.predict(X_media_adstocked.reshape(-1, 1))
            mse = mean_squared_error(y_sales, y_pred)
            mse = round(mse, 4)
            channel_errors.append(mse)

            # Keep track of the best alpha
            if mse < best_mse:
                best_mse = round(mse, 2)
                best_alpha = round(alpha, 1)

        best_alphas.append(best_alpha)
        mse_errors.append(channel_errors)

    return best_alphas, mse_errors

